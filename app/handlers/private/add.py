import concurrent.futures
from datetime import datetime

import pyotp
from aiogram import Dispatcher, Bot
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message
from apscheduler_di import ContextSchedulerDecorator

from app.config import Config
from app.database.services.enums import AccountTypeEnum
from app.database.services.repos import AccountRepo, Account
from app.instagram.proxy import ProxyController
from app.instagram.uploader_v2 import InstagramController
from app.keyboard.inline.accounts import add_account_kb, add_accounts_kb, add_account_confirm_kb, customer_add_kb
from app.keyboard.inline.back import back_keyboard
from app.keyboard.inline.menu import menu_cb
from app.misc.times import now, localize
from app.states.accounts import ParsingSG, PostingSG


async def select_account_type(call: CallbackQuery):
    text = (
        '‚ûï [–î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—É]\n\n'
        '–ë—É–¥—å-–ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∞–∫–∞—É–Ω—Ç—É, —è–∫–∏–π –≤–∏ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ üëá'
    )
    await call.message.edit_text(text, reply_markup=add_accounts_kb)


async def add_username_parsing(call: CallbackQuery, state: FSMContext):
    text = (
        '‚ûï [–î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—É]\n\n'
        '–ë—É–¥—å-–ª–∞—Å–∫–∞, –Ω–∞–¥—ñ–ª—à–ª—ñ—Ç—å <b>—é–∑–µ—Ä–Ω–µ–π–º –∞–∫–∞—É–Ω—Ç—É –Ü–Ω—Å—Ç–∞–≥—Ä–∞–º</b> –∑ —è–∫–æ–≥–æ –±—É–¥—É—Ç—å '
        '–∫–æ–ø—ñ—é–≤–∞—Ç–∏—Å—å –ø–æ—Å—Ç–∏ üëá\n\n'
    )
    msg = await call.message.edit_text(text, reply_markup=back_keyboard('–í—ñ–¥–º—ñ–Ω–∏—Ç–∏', 'parsing'))
    await state.update_data(last_msg_id=msg.message_id)
    await ParsingSG.Login.set()


async def pre_checking_username(msg: Message, state: FSMContext):
    await msg.delete()
    username = msg.text.lower()
    text = (
        '‚ûï [–î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—É]\n\n'
        f'–í–∏ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ <b>{instagram_link(username)}</b> –¥–æ —Å–ø–∏—Å–∫—É —Å–≤–æ—ó—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤,'
        f'–∑ —è–∫–∏—Ö –±—É–¥—É—Ç—å –∫–æ–ø—ñ—é–≤–∞—Ç–∏—Å—å –ø–æ—Å—Ç–∏?\n\n'
        f'–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —Å–≤—ñ–π –≤–∏–±—ñ—Ä üëá'
    )
    last_msg_id = (await state.get_data())['last_msg_id']
    reply_markup = add_account_confirm_kb('parsing', 'parsing')
    msg = await msg.bot.edit_message_text(text, msg.from_user.id, last_msg_id, reply_markup=reply_markup)
    await state.update_data(username=username, last_msg_id=msg.message_id)
    await ParsingSG.Confirm.set()


async def checking_instagram_username_parsing(call: CallbackQuery, state: FSMContext, account_db: AccountRepo,
                                              scheduler: ContextSchedulerDecorator, config: Config,
                                              controller: ProxyController):
    await call.message.delete()
    proxy = controller.get_working_proxy('register')
    if not proxy:
        text = (
            '–ù–∞–∂–∞–ª—å –º–∏ –Ω–µ –º–æ–∂–µ–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤–∞—à –∞–∫–∞—É–Ω—Ç –Ω–∞ –¥—ñ–π—Å–Ω—ñ—Å—Ç—å —á–µ—Ä–µ–∑ —Ç–∏–º—á–∞—Å–æ–≤—É –ø—Ä–æ–±–ª–µ–º—É '
            '–∑ –Ω–∞—à–∏–º–∏ –ø—Ä–æ–∫—Å—ñ-—Å–µ—Ä–≤–µ—Ä–∞–º–∏. –ë—É–¥—å –ª–∞—Å–∫–∞ –∑–≤–µ—Ä–Ω—ñ—Å—Ç—å—è –≤ –ø—ñ–¥—Ç—Ä–∏–º–∫—É, –∞–±–æ —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ'
        )
        await call.message.answer_sticker(config.misc.error_sticker_id)
        return await call.message.answer(text)
    proxy = controller.get_working_proxy('register')  # TODO
    data = await state.get_data()
    username = data['username']
    customers = await account_db.get_accounts_by_user(call.from_user.id, AccountTypeEnum.POSTING)
    technicals = await account_db.get_free_technicals()
    sticker_msg = await call.message.answer('üîç')
    last_msg = await call.message.answer('–ü–µ—Ä–µ–≤—ñ—Ä—è—é –∞–∫–∞—É–Ω—Ç –≤ –Ü–Ω—Å—Ç–∞–≥—Ä–∞–º. –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–æ 5 —Ö–≤...')
    concurrent.futures.ThreadPoolExecutor(max_workers=1).submit(
        InstagramController(proxy=proxy).check_parsing_account,
        customers + technicals, username, scheduler, successfully_login_parsing, bad_login_parsing,
        kwargs=dict(bot=call.bot, user_id=call.from_user.id,
                    last_msg_id=[sticker_msg.message_id, last_msg.message_id],
                    username=username, state=state, account_db=account_db)
    )
    await ParsingSG.Check.set()


async def successfully_login_parsing(bot: Bot, last_msg_id: list[int], user_id: int, username: str, state: FSMContext,
                                     account_db: AccountRepo):
    for msg_id in last_msg_id:
        await bot.delete_message(user_id, msg_id)
    await account_db.add(
        user_id=user_id, username=username, type=AccountTypeEnum.PARSING)
    text = (
        f'‚ûï [–î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—É]\n\n'
        f'‚úî –ê–∫–∞—É–Ω—Ç <b>{username}</b> –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ. –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∫–æ–ø—ñ—é–≤–∞—Ç–∏ –∑ –Ω—å–æ–≥–æ –ø–æ—Å—Ç–∏!'
    )
    await bot.send_message(user_id, text,  reply_markup=back_keyboard('‚óÄ –î–æ —Å–ø–∏—Å–∫—É –∞–∫–∞—É–Ω—Ç—ñ–≤', 'parsing'))
    await state.finish()


async def bad_login_parsing(bot: Bot, last_msg_id: list[int], user_id: int, username: str, state: FSMContext,
                            account_db: AccountRepo):
    for msg_id in last_msg_id:
        await bot.delete_message(user_id, msg_id)
    text = (
        '‚ûï [–î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—É]\n\n'
        f'–ù–∞–∂–∞–ª—å —è –Ω–µ –∑–Ω–∞–π—à–æ–≤ <b>{instagram_link(username)}</b> –≤ –Ü–Ω—Å—Ç–∞–≥—Ä–∞–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.\n\n'
    )
    msg = await bot.send_message(user_id, text=text, reply_markup=add_account_kb('parsing'))
    await state.update_data(last_msg_id=msg.message_id)
    await state.finish()


async def add_username_posting(call: CallbackQuery, state: FSMContext):
    text = (
        '‚ûï [–î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—É]\n\n'
        '<b>1)</b> –ë—É–¥—å-–ª–∞—Å–∫–∞ –Ω–∞–¥—ñ–ª—à–ª—ñ—Ç—å <b>—é–∑–µ—Ä–Ω–µ–π–º</b> –∞–∫–∞—É–Ω—Ç—É –Ω–∞ —è–∫–æ–º—É –±—É–¥—É—Ç—å –ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏—Å—å –ø–æ—Å—Ç–∏ üëá'
    )
    msg = await call.message.edit_text(text, reply_markup=back_keyboard('–í—ñ–¥–º—ñ–Ω–∏—Ç–∏', 'start'))
    await state.update_data(last_msg_id=msg.message_id)
    await PostingSG.Login.set()


async def add_password_posting(msg: Message, state: FSMContext):
    await msg.delete()
    username = msg.text.lower()
    last_msg_id = (await state.get_data())['last_msg_id']
    text = (
        f'‚ûï [–î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—É]\n\n'
        f'–Æ–∑–µ—Ä–Ω–µ–π–º: <b>{instagram_link(username)}</b>\n\n'
        f'<b>2)</b> –ë—É–¥—å-–ª–∞—Å–∫–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å <b>–ø–∞—Ä–æ–ª—å</b> –≤—ñ–¥ –∞–∫–∞—É–Ω—Ç—É üëá'
    )
    msg = await msg.bot.edit_message_text(text, msg.from_user.id, last_msg_id, text,
                                          reply_markup=back_keyboard('–í—ñ–¥–º—ñ–Ω–∏—Ç–∏', 'accounts'))
    await state.update_data(last_msg_id=msg.message_id, username=username)
    await PostingSG.Password.set()


async def add_auth_posting(msg: Message, state: FSMContext, config: Config):
    await msg.delete()
    password = msg.text
    data = await state.get_data()
    last_msg_id = data['last_msg_id']
    username = data['username']
    guide = (
        '–ö–ª—é—á –¥–≤–æ–µ—Ç–∞–ø–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤ –Ü–Ω—Å—Ç–∞–≥—Ä–∞–º - —Ü–µ —Ç–µ–∫—Å—Ç–æ–≤–∏–π –∫–ª—é—á, —â–æ —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è '
        '–∑ 32 –ª—ñ—Ç–µ—Ä —Ç–∞ —Ü–∏—Ñ—Ä. –ó–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–ª—é—á–∞, —Ä—ñ–∑–Ω—ñ –¥–æ–¥–∞—Ç–∫–∏ –º–æ–∂—É—Ç—å –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ '
        '–∫–æ–¥ –∑ 6-—Ç–∏ —Ü–∏—Ñ—Ä, —è–∫–∏–π –≤–∏ –≤–≤–æ–¥–∏—Ç–µ –ø—Ä–∏ –≤—Ö–æ–¥—ñ –≤ –∞–∫–∞—É–Ω—Ç.\n\n'
        '–©–æ–± —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–ª—é—á –¥–≤–æ–µ—Ç–∞–ø–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, <b>–æ–±–æ–≤\'—è–∑–∫–æ–≤–æ –æ–∑–Ω–∞–π–æ–º—Ç–µ—Å—å –∑ '
        '—ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.</b> –Ø–∫—â–æ –≤–∏ –Ω–µ –∫–æ—Ä–∏—Å—Ç—É—î—Ç–µ—Å—å –¥—Ñ—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∏–º '
        '–∑–∞—Ö–∏—Å—Ç–æ–º –≤ –Ü–Ω—Å—Ç–∞–≥—Ä–∞–º, –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å —Ü–µ–π –∫—Ä–æ–∫.'
    )
    text = (
        f'‚ûï [–î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—É]\n\n'
        f'–Æ–∑–µ—Ä–Ω–µ–π–º: <b>{instagram_link(username)}</b>\n'
        f'–ü–∞—Ä–æ–ª—å: {password}\n\n'
        f'<b>3)</b> –ë—É–¥—å-–ª–∞—Å–∫–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å <b>–∫–ª—é—á –¥–≤–æ–µ—Ç–∞–ø–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏</b>'
        f'–¥–ª—è –≤—Ö–æ–¥—É –≤ –∞–∫–∞—É–Ω—Ç, –∞–±–æ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å —Ü–µ–π –∫—Ä–æ–∫ üëá\n\n'
    )
    text += guide
    msg = await msg.bot.edit_message_text(text, msg.from_user.id, last_msg_id,
                                          reply_markup=customer_add_kb(config.misc.auth_guide_link))
    await state.update_data(last_msg_id=msg.message_id, password=password, auth=None)
    await PostingSG.Confirm.set()


async def save_auth_key(msg: Message, state: FSMContext, config: Config, scheduler: ContextSchedulerDecorator):
    await msg.delete()
    data = await state.get_data()
    last_msg_id = data['last_msg_id']
    auth_key: str = msg.text.replace(' ', '')
    if not is_valid_authkey(auth_key) or len(auth_key) < 10 or auth_key.isnumeric():
        username = data['username']
        password = data['password']
        text = (
            f'‚ûï [–î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—É]\n\n'
            f'–Æ–∑–µ—Ä–Ω–µ–π–º: <b>{instagram_link(username)}</b>\n'
            f'–ü–∞—Ä–æ–ª—å: {password}\n\n'
            f'<b>3)</b> –ë—É–¥—å-–ª–∞—Å–∫–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å <b>–∫–ª—é—á –¥–≤–æ–µ—Ç–∞–ø–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏</b>'
            f'–¥–ª—è –≤—Ö–æ–¥—É –≤ –∞–∫–∞—É–Ω—Ç, –∞–±–æ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å —Ü–µ–π –∫—Ä–æ–∫ üëá\n\n'
            f'<i>–ù–∞–¥—ñ—Å–ª–∞–Ω–∏–π –≤–∞–º–∏ –∫–ª—é—á {auth_key} –Ω–µ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π. –ë—É–¥—å-–ª–∞—Å–∫–∞ –æ–∑–Ω–∞–π–æ–º—Ç–µ—Å—å '
            f'–∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é, —ñ –ø–æ–≤—Ç–æ—Ä—ñ—Ç—å —Å–ø—Ä–æ–±—É.\n\n–Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—â—ñ –Ω–∞ —Ü—å–æ–º—É –µ—Ç–∞–ø—ñ,'
            f' –Ω–∞–ø–∏—à—ñ—Ç—å –Ω–∞–º –≤ —á–∞—Ç –ø—ñ–¥—Ç—Ä–∏–º–∫–∏!</i>'
        )
        await msg.bot.edit_message_text(text, msg.from_user.id, last_msg_id,
                                        reply_markup=customer_add_kb(config.misc.auth_guide_link, help=True))
        return
    else:
        auth_code = pyotp.TOTP(auth_key)
        time_remaining = int(auth_code.interval - now().timestamp() % auth_code.interval)
        text = (
            f'–í–∞—à –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥—É: <code>{auth_code.now()}</code>, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å, —â–æ–± —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏.\n\n'
            f'üïê –ö–æ–¥ –±—É–¥–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω–æ —á–µ—Ä–µ–∑ {time_remaining} —Å–µ–∫—É–Ω–¥'
        )
        auth_code_msg = await msg.answer(text)
        await state.update_data(auth_code_msg_id=auth_code_msg.message_id, start_time=now().timestamp())
        job = scheduler.add_job(auth_code_auto_update, trigger='interval', max_instances=2, misfire_grace_time=5,
                                seconds=1, kwargs=dict(msg=msg, auth_key=auth_key, state=state))
        await state.update_data(job_id=job.id, auth_key=auth_key)
        username = data['username']
        password = data['password']
        text = (
            f'‚ûï [–î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—É]\n\n'
            f'–Æ–∑–µ—Ä–Ω–µ–π–º: <b>{instagram_link(username)}</b>\n'
            f'–ü–∞—Ä–æ–ª—å: {password}\n'
            f'–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—É üëá'
        )
        await msg.bot.delete_message(msg.from_user.id, last_msg_id)
        msg = await msg.answer(text, reply_markup=add_account_confirm_kb('posting'))
        await state.update_data(last_msg_id=msg.message_id)


async def confirm_add_posting(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    last_msg_id = data['last_msg_id']
    username = data['username']
    password = data['password']
    text = (
        f'‚ûï [–î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—É]\n\n'
        f'–Æ–∑–µ—Ä–Ω–µ–π–º: <b>{instagram_link(username)}</b>\n'
        f'–ü–∞—Ä–æ–ª—å: {password}\n\n'
        f'–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—É üëá'
    )
    await state.update_data(job_id=None, auth_key=None)
    await call.message.bot.edit_message_text(text, call.from_user.id, last_msg_id,
                                             reply_markup=add_account_confirm_kb('posting'))


async def checking_instagram_login_posting(call: CallbackQuery, state: FSMContext, account_db: AccountRepo,
                                           scheduler: ContextSchedulerDecorator, config: Config,
                                           controller: ProxyController):
    await call.message.delete()
    data = await state.get_data()
    if scheduler.get_job(data['job_id']):
        scheduler.get_job(data['job_id']).remove()
    proxy = controller.get_working_proxy('register')
    if not proxy:
        text = (
            '–ù–∞–∂–∞–ª—å –º–∏ –Ω–µ –º–æ–∂–µ–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤–∞—à –∞–∫–∞—É–Ω—Ç –Ω–∞ –¥—ñ–π—Å–Ω—ñ—Å—Ç—å —á–µ—Ä–µ–∑ —Ç–∏–º—á–∞—Å–æ–≤—É –ø—Ä–æ–±–ª–µ–º—É '
            '–∑ –Ω–∞—à–∏–º–∏ –ø—Ä–æ–∫—Å—ñ-—Å–µ—Ä–≤–µ—Ä–∞–º–∏. –ë—É–¥—å –ª–∞—Å–∫–∞ –∑–≤–µ—Ä–Ω—ñ—Å—Ç—å—è –≤ –ø—ñ–¥—Ç—Ä–∏–º–∫—É, –∞–±–æ —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ'
        )
        await call.message.answer_sticker(config.misc.error_sticker_id)
        return await call.message.answer(text)
    proxy = controller.get_working_proxy('register')  # TODO
    username = data['username']
    password = data['password']
    auth_key = data['auth_key']
    customer = await account_db.add(username=username, password=password, auth_key=auth_key, user_id=call.from_user.id,
                                    type=AccountTypeEnum.POSTING)
    sticker_msg = await call.message.answer('‚è≥')
    last_msg = await call.message.answer('–ü—Ä–æ–±—É—é —É–≤—ñ–π—Ç–∏ –≤ –≤–∞—à –∞–∫–∞—É–Ω—Ç –≤ –Ü–Ω—Å—Ç–∞–≥—Ä–∞–º. –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–æ 5 —Ö–≤...')
    concurrent.futures.ThreadPoolExecutor(max_workers=1).submit(
        InstagramController(proxy=proxy).login, customer, scheduler, successfully_login_posting,
        bad_login_posting,
        kwargs=dict(bot=call.bot, user_id=call.from_user.id,
                    last_msg_id=[last_msg.message_id, sticker_msg.message_id],
                    customer=customer, state=state, account_db=account_db)
    )
    await ParsingSG.Check.set()


async def successfully_login_posting(bot: Bot, last_msg_id: list[int], user_id: int, customer: Account, state: FSMContext,
                                     account_db: AccountRepo):
    for msg_id in last_msg_id:
        await bot.delete_message(user_id, msg_id)
    text = (
        f'‚ûï [–î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—É]\n\n'
        f'‚úî –ê–∫–∞—É–Ω—Ç <b>{customer.username}</b> –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ. –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –ø–æ—Å—Ç–∏ –Ω–∞ –Ω—å–æ–º—É!'
    )
    await bot.send_message(user_id, text,  reply_markup=back_keyboard('‚óÄ –î–æ —Å–ø–∏—Å–∫—É –∞–∫–∞—É–Ω—Ç—ñ–≤', 'accounts'))
    await state.finish()


async def bad_login_posting(bot: Bot, last_msg_id: list[int], user_id: int, customer: Account, state: FSMContext,
                            account_db: AccountRepo):
    for msg_id in last_msg_id:
        await bot.delete_message(user_id, msg_id)
    text = (
        '‚ûï [–î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—É]\n\n'
        f'–ù–∞–∂–∞–ª—å —è –Ω–µ –∑–º—ñ–≥ —É–≤—ñ–π—Ç–∏ –≤ –≤–∞—à –∞–∫–∞—É–Ω—Ç <b>{instagram_link(customer.username)}</b> '
        f'–≤ –Ü–Ω—Å—Ç–∞–≥—Ä–∞–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.\n\n'
    )
    await account_db.delete_account(customer.account_id)
    msg = await bot.send_message(user_id, text=text, reply_markup=add_account_kb('posting'))
    await state.update_data(last_msg_id=msg.message_id)
    await state.finish()


def setup(dp: Dispatcher):
    dp.register_callback_query_handler(select_account_type, menu_cb.filter(action='add_account'), state='*')
    dp.register_callback_query_handler(add_username_parsing, menu_cb.filter(action='add_parsing'), state='*')
    dp.register_message_handler(pre_checking_username, state=ParsingSG.Login)
    dp.register_callback_query_handler(checking_instagram_username_parsing, menu_cb.filter(action='conf_add_parsing'),
                                       state='*')

    dp.register_callback_query_handler(add_username_posting, menu_cb.filter(action='add_posting'), state='*')
    dp.register_message_handler(add_password_posting, state=PostingSG.Login)
    dp.register_message_handler(add_auth_posting, state=PostingSG.Password)
    dp.register_message_handler(save_auth_key, state=PostingSG.Confirm)
    dp.register_callback_query_handler(confirm_add_posting, menu_cb.filter(action='skip_2fa'), state='*')
    dp.register_callback_query_handler(checking_instagram_login_posting, menu_cb.filter(action='conf_add_posting'),
                                       state='*')


async def add_account_posting(call: CallbackQuery):
    text = (
        '‚ûï [–î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—É]\n\n'
        '–£ –≤–∞—Å –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É <b>–¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó</b>, '
        '–≤–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –π–æ–≥–æ –∑–∞—Ä–∞–∑'
    )
    await call.message.edit_text(text, reply_markup=add_account_kb('posting'))


async def add_account_parsing(call: CallbackQuery):
    text = (
        '‚ûï [–î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—É]\n\n'
        '–£ –≤–∞—Å –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É <b>–¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è</b>, '
        '–≤–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –π–æ–≥–æ –∑–∞—Ä–∞–∑'
    )
    await call.message.edit_text(text, reply_markup=add_account_kb('parsing'))


def instagram_link(username: str) -> str:
    return f'<a href="https://www.instagram.com/{username}">@{username}</a>'


def is_valid_authkey(key: str) -> bool:
    try:
        pyotp.TOTP(key).now()
        return True
    except:
        return False


async def auth_code_auto_update(msg: Message, auth_key, state: FSMContext, scheduler: ContextSchedulerDecorator):
    data = await state.get_data()
    try:
        start_time = data['start_time']
        auth_code_msg_id = data['auth_code_msg_id']
        auth_code = pyotp.TOTP(auth_key)
        time_remaining = int(auth_code.interval - now().timestamp() % auth_code.interval)
        text = (
            f'–í–∞—à –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥—É: <code>{auth_code.now()}</code>, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å, —â–æ–± —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏. '
            f'(–¶–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–¥–∞–ª–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ 1 —Ö–≤)\n\n'
            f'üïê –ö–æ–¥ –±—É–¥–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω–æ —á–µ—Ä–µ–∑ {time_remaining} —Å–µ–∫—É–Ω–¥. –©–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—É.'
        )
        if (now() - localize(datetime.fromtimestamp(start_time))).seconds >= 60:
            text = (
                '–ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏—á–µ—Ä–ø–∞–Ω–æ, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–¥ –∑–Ω–æ–≤—É, –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –∫–ª—é—á –ø–æ–≤—Ç–æ—Ä–Ω–æ, –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å '
                '–º–æ–±—ñ–ª—å–Ω–∏–º –¥–æ–¥–∞—Ç–∫–æ–º Google Authenticator.'
            )
            await msg.bot.delete_message(msg.from_user.id, auth_code_msg_id)
            await msg.answer(text)
            scheduler.get_job(data['job_id']).remove()
            return
        await msg.bot.edit_message_text(text, msg.from_user.id, auth_code_msg_id)
    except:
        scheduler.get_job(data['job_id']).remove()
