from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message
from apscheduler_di import ContextSchedulerDecorator
from babel.dates import format_date

from app.config import Config
from app.database.models import Account, Work
from app.database.services.enums import AccountTypeEnum, AccountStatusEnum, WorkModeEnum, PostStatusEnum
from app.database.services.repos import AccountRepo, WorkRepo, PostRepo, UserRepo
from app.handlers.private.add import add_account_posting
from app.handlers.private.decorator import construct_work_mode, construct_work_status, construct_accounts_list
from app.keyboard import Buttons
from app.keyboard.inline.accounts import customers_kb, account_cb, customer_settings_cb, developer_statistic_kb
from app.keyboard.inline.back import back_keyboard
from app.keyboard.inline.menu import menu_cb
from app.keyboard.inline.moderate import moderate_limit_kb, limit_cb, confirm_moderate_kb, construct_executors_kb, \
    construct_work_mode_kb, add_work_cb, confirm_add_work_kb, delete_work_kb, confirm_delete_work_kb, mod_work_cb, \
    edit_login_data_kb
from app.misc.times import localize
from app.states.accounts import LastNSG, InstagramDataSG


async def posting_cmd(call: CallbackQuery, callback_data: dict, config: Config, account_db: AccountRepo,
                      work_db: WorkRepo, state: FSMContext):
    data = await state.get_data()
    user_id = data['user_id'] if 'user_id' in data.keys() else call.from_user.id
    customers = await account_db.get_accounts_by_user(user_id, AccountTypeEnum.POSTING)
    if not customers:
        return await add_account_posting(call)
    customers.sort(key=lambda acc: acc.created_at)
    customer_id = int(callback_data['account_id']) if 'account_id' in list(callback_data.keys()) else customers[0].account_id
    customer = await account_db.get_account(customer_id)
    works = await work_db.get_work_customer(customer.account_id)
    if len(customers) == 1 and callback_data['action'] == 'pag':
        await call.answer('–£ –≤–∞—Å —Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω –∞–∫–∞—É–Ω—Ç')
        return
    text = (
        f'üóÇ [–í–∞—à—ñ –∞–∫–∞—É–Ω—Ç–∏ | –î–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó]\n\n'
        f'{construct_accounts_list(customers, customer)}\n'
        f'{construct_customer_text(customer)}'
        f'{await construct_customer_works(customer, works, account_db)}\n'
    )
    if customer.status == AccountStatusEnum.UNPAID:
        text += '<b>–¢–µ—Ä–º—ñ–Ω –¥—ñ—ó –≤–∞—à–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏ –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è. –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –ø–æ—Å—Ç—ñ–≤ –±—É–ª–∞ –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–∞...</b>'
    if customer.status == AccountStatusEnum.BANNED:
        text += (
            f'<b>–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –ø–æ—Å—Ç—ñ–≤ –∑—É–ø–∏–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑  –ø—Ä–æ–±–ª–µ–º—É –∑—ñ –≤—Ö–æ–¥–æ–º —É –≤–∞—à –∞–∫–∞—É–Ω—Ç –Ü–Ω—Å—Ç–∞–≥—Ä–∞–º.</b>\n\n'
            f'–í–∏ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è –≤—Ö–æ–¥—É (–ø–∞—Ä–æ–ª—å, –ª–æ–≥—ñ–Ω, —Ç–æ—â–æ) —ñ –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é –ø–æ—Å—Ç—ñ–≤ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ, –∞–±–æ '
            f'–∑–≤–µ—Ä–Ω—É—Ç–∏—Å—å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –≤ —á–∞—Ç –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.'
        )
    dev = call.from_user.id in config.bot.admin_ids
    await call.message.edit_text(text, reply_markup=customers_kb(customers, customer, dev, bool(works)))


async def posting_setting_cmd(call: CallbackQuery, callback_data: dict, account_db: AccountRepo):
    customer_id = int(callback_data['account_id'])
    customer = await account_db.get_account(customer_id)
    text = (
        f'üóÇ [–î–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó | {Buttons.accounts.settings}]\n\n'
        f'–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –≤–∞—à–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É <b>{customer.username}.</b>\n\n'
        f'–õ—ñ–º—ñ—Ç –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π. –ó–º—ñ–Ω–∏—Ç–∏ –ª—ñ–º—ñ—Ç –ø–æ—Å—Ç—ñ–≤, —â–æ –ø—É–±–ª—ñ–∫—É—é—Ç—å—Å—è –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å\n\n'
        f'–î–∞–Ω—ñ –¥–ª—è –Ü–Ω—Å—Ç–∞–≥—Ä–∞–º. –ó–º—ñ–Ω–∏—Ç–∏ –ª–æ–≥—ñ–Ω, –ø–∞—Ä–æ–ª—å –∞–±–æ –∫–æ–¥ –¥–≤–æ–µ—Ç–∞–ø–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏\n\n'
        f'–ó—É–ø–∏–Ω–∏—Ç–∏ –∞–±–æ –∑–∞–ø—É—Å—Ç–∏—Ç–∏. –î–ª—è –∑—É–ø–∏–Ω–∫–∏ –∞–±–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π –ø–æ—Å—Ç—ñ–≤ –Ω–∞ –∞–∫–∞—É–Ω—Ç—ñ\n\n'
        f'–í–∏–¥–∞—Ç–∏—Ç–∏. –î–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞ —ñ –ø—Ä–∏–≤\'—è–∑–∞–Ω–∏—Ö –ø–æ—Å—Ç—ñ–≤'
    )
    await call.message.edit_text(text, reply_markup=customer_settings_cb(customer))


async def developer_settings(call: CallbackQuery, callback_data: dict, account_db: AccountRepo,
                             user_db: UserRepo, post_db: PostRepo):
    customer_id = int(callback_data['account_id'])
    customer = await account_db.get_account(customer_id)
    user = await user_db.get_user(customer.user_id)
    fmt = '%H:%M:%S'
    text = (
        f'üóÇ [–î–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó | {Buttons.accounts.developer}]\n\n'
        f'–Æ–∑–µ—Ä–Ω–µ–π–º: {customer.username}\n'
        f'–ü–∞—Ä–æ–ª—å: {customer.password}\n'
        f'–ö–ª—é—á 2Fa: {customer.auth_key}\n'
        f'–õ—ñ–º—ñ—Ç –≤ –¥–µ–Ω—å: {customer.limit}\n'
        f'–ê–∫–∫–∞—É–Ω—Ç id: {customer.account_id}\n'
        f'–í—ñ–ª—å–Ω–∏—Ö –¥—ñ–π: {customer.free_action}\n'
        f'–°—Ç–≤–æ—Ä–µ–Ω–æ: {format_date(customer.created_at, locale="uk_UA")} {localize(customer.created_at).strftime(fmt)}\n'
        f'–û–Ω–æ–≤–ª–µ–Ω–æ: {format_date(customer.updated_at, locale="uk_UA")} {localize(customer.updated_at).strftime(fmt)}\n'
        f'–ö-—Ç—å –¥–Ω—ñ–≤ —É –ø—ñ–¥–ø–∏—Å—Ü—ñ: {customer.subscript_days}\n'
        f'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: <a href="tg://user?id={user.user_id}">{user.full_name}</a>'
    )
    plan_download_posts = await post_db.get_posts_customer(customer_id, PostStatusEnum.PLAN_DOWNLOAD)
    wait_public_posts = await post_db.get_posts_customer(customer_id, PostStatusEnum.WAIT_PUBLIC)
    detail_statistic = any(list(map(bool, [plan_download_posts + wait_public_posts])))
    if customer.subscript_date:
        text += f'–û–ø–ª–∞—á–µ–Ω–æ: {format_date(customer.subscript_date, locale="uk_UA")} ' \
                f'{localize(customer.subscript_date).strftime(fmt)}\n'
    await call.message.edit_text(text, reply_markup=developer_statistic_kb(customer, user, detail_statistic))


async def limit_cmd(call: CallbackQuery, callback_data: dict, account_db: AccountRepo):
    customer_id = int(callback_data['account_id'])
    customer = await account_db.get_account(customer_id)
    action = callback_data['action']
    if action == 'set':
        await account_db.update_account(customer_id, limit=int(callback_data['val']))
    elif action == 'plus':
        if customer.limit + int(callback_data['val']) > 50:
            await call.answer('–í–∏ –¥–æ—Å—è–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ª—ñ–º—ñ—Ç—É, 50 –ø–æ—Å—Ç—ñ–≤ –≤ –¥–µ–Ω—å', show_alert=True)
            return
        await account_db.update_account(customer_id, limit=customer.limit + int(callback_data['val']))
    elif action == 'minus':
        if customer.limit - int(callback_data['val']) <= 0:
            await call.answer('–í–∏ –¥–æ—Å—è–≥–ª–∏ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –ª—ñ–º—ñ—Ç—É, 1 –ø–æ—Å—Ç –≤ –¥–µ–Ω—å', show_alert=True)
            return
        await account_db.update_account(customer_id, limit=customer.limit - int(callback_data['val']))
    customer = await account_db.get_account(customer_id)
    text = (
        f'üóÇ [–î–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó | {Buttons.accounts.limit}]\n\n'
        f'–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –ª—ñ–º—ñ—Ç –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π. –¶–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–µ —á–∏—Å–ª–æ –ø–æ—Å—Ç—ñ–≤, —è–∫—ñ –º–æ–∂—É—Ç—å –±—É—Ç–∏ '
        f'–æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω—ñ –Ω–∞ –≤–∞—à–æ–º—É –∞–∫–∞—É–Ω—Ç—ñ <b>{customer.username}</b>.\n\n–ó–≤–µ—Ä–Ω—ñ—Å—Ç—å —É–≤–∞–≥—É, '
        f'–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—î –∑–±—ñ–ª—å—à—É–≤–∞—Ç–∏ –ª—ñ–º—ñ—Ç –≤–∏—â–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ (25) '
        f'—É —Ä–∞–∑—ñ, —è–∫—â–æ –≤–∞—à –∞–∫–∞—É–Ω—Ç –±—É–≤ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –º–µ–Ω—à–µ –Ω—ñ–∂ 2 –º—ñ—Å—è—Ü—ñ —Ç–æ–º—É.\n\n'
        f'–ü–æ—Ç–æ—á–Ω–∏–π –ª—ñ–º—ñ—Ç –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π: <b>{customer.limit} –ø–æ—Å—Ç—ñ–≤ –∑–∞ –¥–µ–Ω—å.</b>'
    )
    await call.message.edit_text(text, reply_markup=moderate_limit_kb(customer))


async def confirm_pause_cmd(call: CallbackQuery, callback_data: dict, account_db: AccountRepo):
    customer_id = int(callback_data['account_id'])
    customer = await account_db.get_account(customer_id)
    if customer.status == AccountStatusEnum.BANNED:
        await call.answer('–¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –¥–ª—è –∞–∫–∞—É–Ω—Ç—ñ–≤, —è–∫—ñ –ù–ï –º–∞—é—Ç—å —Å—Ç–∞—Ç—É—Å "–ê–∫—Ç–∏–≤–Ω–∏–π"', show_alert=True)
        return
    text = (
        f'üóÇ [–î–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó | {Buttons.accounts.pause}]\n\n'
        f'–¶—è —Ñ—É–Ω–∫—Ü—ñ—è –∑—É–ø–∏–Ω–∏—Ç—å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é –ø–æ—Å—Ç—ñ–≤ –¥–ª—è –≤–∞—à–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É <b>{customer.username}</b>.\n\n'
        '<b>–í–∏ –±–∞–∂–∞—î—Ç–µ –∑—É–ø–∏–Ω–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç?</b>'
    )
    await call.message.edit_text(text, reply_markup=confirm_moderate_kb(customer, 'pause'))


async def confirm_delete_cmd(call: CallbackQuery, callback_data: dict, account_db: AccountRepo):
    customer_id = int(callback_data['account_id'])
    customer = await account_db.get_account(customer_id)
    text = (
        f'üóÇ [–î–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó | {Buttons.accounts.delete}]\n\n'
        f'–¶—è –¥—ñ—è –ø—Ä–∏–∑–≤–µ–¥–µ –¥–æ –Ω–µ–∑–≤–æ—Ä–æ—Ç–Ω—å–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö –≤—ñ–¥ –≤–∞—à–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É, '
        f'–∞ —Ç–∞–∫–æ–∂ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –ø–æ—Å—Ç—ñ–≤.\n\n'
        '<b>–í–∏ –±–∞–∂–∞—î—Ç–µ –≤–∏–¥–ª–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç?</b>'
    )
    await call.message.edit_text(text, reply_markup=confirm_moderate_kb(customer, 'delete'))


async def delete_account_cmd(call: CallbackQuery, callback_data: dict, account_db: AccountRepo, work_db: WorkRepo,
                             post_db: PostRepo, config: Config, scheduler: ContextSchedulerDecorator):
    customer_id = int(callback_data['account_id'])
    customer = await account_db.get_account(customer_id)
    works = await work_db.get_work_customer(customer_id)
    for work in works:
        posts = await post_db.get_post_work(work.work_id)
        for post in posts:
            post.delete_me(config)
            post.delete_my_job(scheduler)
            await post_db.delete_post(post.post_id)
        await work_db.delete_work(work.work_id)
    text = (
        f'üóÇ [–î–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó | {Buttons.accounts.delete}]\n\n'
        f'–í–∞—à –∞–∫–∞—É–Ω—Ç {customer.username} –±—É–≤ –≤–∏–¥–∞–ª–µ–Ω–∏–π\n\n'
        f'–î–∞–Ω—ñ –¥–ª—è –≤—Ö–æ–¥—É –≤ –Ü–Ω—Å—Ç–∞–≥—Ä–∞–º –≤—ñ–¥ –≤–∞—à–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É\n\n'
        f'–ü–∞—Ä–æ–ª—å: {customer.password}\n'
    )
    if customer.auth_key:
        text += (
            f'–ö–ª—é—á –¥–≤–æ–µ—Ç–∞–ø–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {customer.auth_key}'
        )
    await account_db.delete_account(customer_id)
    await call.answer('–ê–∫–∞—É–Ω—Ç –±—É–≤ –≤–∏–¥–∞–ª–µ–Ω–∏–π', show_alert=True)
    await call.message.edit_text(text, reply_markup=back_keyboard())


async def pause_cmd(call: CallbackQuery, callback_data: dict, account_db: AccountRepo,
                    post_db: PostRepo, scheduler: ContextSchedulerDecorator):
    customer_id = int(callback_data['account_id'])
    customer = await account_db.get_account(customer_id)
    await account_db.update_account(customer_id, status=AccountStatusEnum.PAUSE)
    for post in await post_db.get_posts_account(customer_id):
        if post.job_id and scheduler.get_job(post.job_id):
            scheduler.get_job(post.job_id).resume()
    text = (
        f'–í–∏ –∑—É–ø–∏–Ω–∏–ª–∏ —É—Å—ñ –¥—ñ—ó –¥–ª—è –≤–∞—à–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É {customer.username} ‚úî'
    )
    await call.answer(text, show_alert=True)
    await posting_setting_cmd(call, callback_data, account_db)


async def confirm_resume_cmd(call: CallbackQuery, callback_data: dict, account_db: AccountRepo):
    customer_id = int(callback_data['account_id'])
    customer = await account_db.get_account(customer_id)
    text = (
        f'üóÇ [–î–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó | {Buttons.accounts.resume}]\n\n'
        f'–í–∏ –¥—ñ–π—Å–Ω–æ –±–∞–∂–∞—î—Ç–µ –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é –ø–æ—Å—Ç—ñ–≤ '
        f'–¥–ª—è –≤–∞—à–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É <b>{customer.username}</b>?'
    )
    await call.message.edit_text(text, reply_markup=confirm_moderate_kb(customer, 'resume'))


async def resume_cmd(call: CallbackQuery, callback_data: dict, account_db: AccountRepo):
    customer_id = int(callback_data['account_id'])
    customer = await account_db.get_account(customer_id)
    await account_db.update_account(customer_id, status=AccountStatusEnum.ACTIVE)
    text = (
        f'–í–∏ –≤—ñ–¥–Ω–æ–≤–∏–ª–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é –ø–æ—Å—Ç—ñ–≤ –¥–ª—è –≤–∞—à–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É {customer.username} ‚úî'
    )
    await call.answer(text, show_alert=True)
    await posting_setting_cmd(call, callback_data, account_db)


async def select_executor_work(call: CallbackQuery, callback_data: dict, account_db: AccountRepo, state: FSMContext):
    await state.finish()
    customer_id = int(callback_data['account_id'])
    customer = await account_db.get_account(customer_id)
    executors = await account_db.get_accounts_by_user(call.from_user.id, AccountTypeEnum.PARSING)
    text = (
        f'üóÇ [–î–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó | {Buttons.accounts.add_work}]\n\n'
        f'–î–æ–¥–∞–π—Ç–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –≤–∞—à–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É <b>{customer.username}</b>\n\n'
        f'–û–±–µ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç, –∑ —è–∫–æ–≥–æ –±—É–¥—É—Ç—å –∫–æ–ø—ñ—é–≤–∞—Ç–∏—Å—å –ø–æ—Å—Ç–∏ üëá'
    )
    await call.message.edit_text(text, reply_markup=construct_executors_kb(executors, customer))


async def select_work_mode(call: CallbackQuery, callback_data: dict, account_db: AccountRepo):
    customer_id = int(callback_data['account_id'])
    executor_id = int(callback_data['executor_id'])
    customer = await account_db.get_account(customer_id)
    executor = await account_db.get_account(executor_id)
    text = (
        f'üóÇ [–î–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó | {Buttons.accounts.add_work}]\n\n'
        f'–í–∏ –±–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ –≤–∞—à –∞–∫–∞—É–Ω—Ç <b>{customer.username}</b>\n\n'
        f'–û–±–µ—Ä—ñ—Ç—å –≤–∏–¥ –ø–æ—Å—Ç—ñ–≤ —è–∫—ñ –±—É–¥—É—Ç—å —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω—ñ –∑ {executor.username} üëá'
    )
    await call.message.edit_text(text, reply_markup=construct_work_mode_kb(executor, customer))


async def confirm_add_work(call: CallbackQuery, callback_data: dict, account_db: AccountRepo, work_db: WorkRepo,
                           state: FSMContext):
    customer_id = int(callback_data['account_id'])
    executor_id = int(callback_data['executor_id'])
    customer = await account_db.get_account(customer_id)
    executor = await account_db.get_account(executor_id)
    mode = callback_data['mode']
    works = await work_db.get_custom_work(customer_id, executor_id, get_work_enum(mode, disable_last_n=True))
    if works:
        text = (
            '–¢–∞–∫–µ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∂–µ —ñ—Å–Ω—É—î, –≤–∏ –∑–º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è, –∫–æ–ª–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–µ.'
        )
        await call.answer(text, show_alert=True)
        return
    if mode == 'last_n':
        text = (
            f'üóÇ [–î–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó | {Buttons.accounts.add_work}]\n\n'
            f'–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —á–∏—Å–ª–æ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ—Å—Ç—ñ–≤ —è–∫—ñ —Ç—Ä–µ–±–∞ —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ üëá'
        )
        last_msg = await call.message.edit_text(text)
        await state.update_data(executor_id=executor_id, customer_id=customer_id, last_msg_id=last_msg.message_id)
        await LastNSG.Input.set()
        return
    text = (
        f'üóÇ [–î–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó | {Buttons.accounts.add_work}]\n\n'
        f'–í–∏ –æ–±—Ä–∞–ª–∏: <b>–°–∫–æ–ø—ñ—é–≤–∞—Ç–∏ {get_work_mode(mode, 0).lower()} –∑ {executor.username}</b>\n\n'
        f'–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è <b>{customer.username}</b>'
    )
    await call.message.edit_text(text, reply_markup=confirm_add_work_kb(executor, customer, mode))


async def save_work_limit(msg: Message, state: FSMContext, account_db: AccountRepo):
    await msg.delete()
    data = await state.get_data()
    limit = str(msg.text).strip()
    error_text = (
        f'üóÇ [–î–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó | {Buttons.accounts.add_work}]\n\n'
        f'error_message\n\n'
        f'–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —á–∏—Å–ª–æ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ—Å—Ç—ñ–≤ —è–∫—ñ —Ç—Ä–µ–±–∞ —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ üëá'
    )
    if 'last_msg_id' in list(data.keys()):
        await msg.bot.delete_message(msg.from_user.id, data['last_msg_id'])
    if not limit.isnumeric():
        error_text = error_text.replace('error_message', '–ù–µ —Å—Ö–æ–∂–µ –Ω–∞ —á–∏—Å–ª–æ, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑')
        last_msg = await msg.answer(error_text)
        await state.update_data(last_msg_id=last_msg.message_id)
        return
    elif int(limit) > 1000:
        error_text = error_text.replace('error_message', '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤ 1000')
        last_msg = await msg.answer(error_text)
        await state.update_data(last_msg_id=last_msg.message_id)
        return
    limit = int(limit)
    customer_id = data['customer_id']
    executor_id = data['executor_id']
    customer = await account_db.get_account(customer_id)
    executor = await account_db.get_account(executor_id)
    text = (
        f'üóÇ [–î–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó | {Buttons.accounts.add_work}]\n\n'
        f'–í–∏ –æ–±—Ä–∞–ª–∏: <b>–°–∫–æ–ø—ñ—é–≤–∞—Ç–∏ {get_work_mode("last_n", limit).lower()} –∑ {executor.username}</b>\n\n'
        f'–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è <b>{customer.username}</b>'
    )
    await msg.answer(text, reply_markup=confirm_add_work_kb(executor, customer, 'last_n'))
    await state.update_data(limit=limit)


async def create_work_cmd(call: CallbackQuery, callback_data: dict, config: Config, account_db: AccountRepo,
                          work_db: WorkRepo, state: FSMContext):
    data = await state.get_data()
    customer_id = int(callback_data['account_id'])
    executor_id = int(callback_data['executor_id'])
    mode = callback_data['mode']
    limit = data['limit'] if 'limit' in list(data.keys()) else 0
    mode_enum = get_work_enum(mode)
    await work_db.add(
        mode=mode_enum, limit=limit, user_id=call.from_user.id,
        customer_id=customer_id, executor_id=executor_id
    )
    await call.answer('–ó–∞–≤–¥–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ', show_alert=True)
    await posting_cmd(call, callback_data, config, account_db, work_db, state)
    await state.finish()


async def delete_work_cmd(call: CallbackQuery, callback_data: dict, account_db: AccountRepo, work_db: WorkRepo,
                          state: FSMContext):
    customer_id = int(callback_data['account_id'])
    customer = await account_db.get_account(customer_id)
    text = (
        f'üóÇ [–î–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó | {Buttons.accounts.del_work}]\n\n'
    )
    customer_works = await work_db.get_work_customer(customer_id)
    if not customer_works:
        await call.answer('–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–≤–¥–∞–Ω—å –Ω–∞ —Ü—å–æ–º—É –∞–∫–∞—É–Ω—Ç—ñ')
        await select_executor_work(call, callback_data, account_db, state)
        return
    for work, num in zip(customer_works, range(1, len(customer_works)+1)):
        executor = await account_db.get_account(work.executor_id)
        text += f'{num}. {construct_work_mode(work)} –∑ {executor.username}\n'
    text += f'\n–í–∏–±–µ—Ä—ñ—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—è, —è–∫–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏ <b>{customer.username}</b> üëá'
    await call.message.edit_text(text, reply_markup=delete_work_kb(customer_works, customer))


async def confirm_delete_work(call: CallbackQuery, callback_data: dict, work_db: WorkRepo, account_db: AccountRepo):
    work_id = int(callback_data['work_id'])
    customer_id = int(callback_data['account_id'])
    work = await work_db.get_work(work_id)
    customer = await account_db.get_account(customer_id)
    executor = await account_db.get_account(work.executor_id)
    text = (
        f'üóÇ [–î–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó | {Buttons.accounts.del_work}]\n\n'
        f'<b>{construct_work_mode(work)} –∑ {executor.username}</b>\n\n'
        f'–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è: üëá'
    )
    await call.message.edit_text(text, reply_markup=confirm_delete_work_kb(work, customer))


async def delete_work(call: CallbackQuery, callback_data: dict, work_db: WorkRepo, account_db: AccountRepo,
                      post_db: PostRepo, scheduler: ContextSchedulerDecorator, config: Config, state: FSMContext):
    work_id = int(callback_data['work_id'])
    await work_db.delete_work(work_id)
    for post in await post_db.get_post_work(work_id):
        if post.job_id and scheduler.get_job(post.job_id):
            scheduler.get_job(post.job_id).remove()
        post.delete_me(config)
        await post_db.delete_post(post.post_id)
    await call.answer('–ó–∞–≤–¥–∞–Ω–Ω—è –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ', show_alert=True)
    await posting_cmd(call, callback_data, config, account_db, work_db, state)


async def data_for_instagram_cmd(call: CallbackQuery, callback_data: dict, account_db: AccountRepo, state: FSMContext):
    customer_id = int(callback_data['account_id'])
    customer = await account_db.get_account(customer_id)
    auth_key = '–í—ñ–¥—Å—É—Ç–Ω—ñ–π' if not customer.auth_key else f'\n{customer.auth_key}'
    text = (
        f'üóÇ [–î–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó | {Buttons.accounts.login_data}]\n\n'
        f'<b>–Æ–∑–µ—Ä–Ω–µ–π–º:</b> {customer.username}\n'
        f'<b>–ü–∞—Ä–æ–ª—å:</b> {customer.password}\n'
        f'<b>–ö–ª—é—á –¥–≤–æ–µ—Ç–∞–ø–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:</b> {auth_key}\n\n'
        f'–í–∏ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –±—É–¥—å —è–∫—ñ –∑ –¥–∞–Ω–∏—Ö –¥–ª—è –≤—Ö–æ–¥—É –≤ –Ü–Ω—Å—Ç–∞–≥—Ä–∞–º, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ '
        f'–Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ üëá'
    )
    await call.message.edit_text(text, reply_markup=edit_login_data_kb(customer))
    await state.update_data(customer_id=customer_id)


async def input_username(call: CallbackQuery, callback_data: dict, state: FSMContext):
    customer_id = int(callback_data['account_id'])
    text = (
        f'üóÇ [–î–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó | {Buttons.accounts.login_data}]\n\n'
        f'–í—ñ–¥–ø—Ä–∞–≤—Ç–µ <b>–Ω–æ–≤–∏–π —é–∑–µ—Ä–Ω–µ–π–º</b> —Ç–µ–∫—Å—Ç–æ–≤–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º üëá'
    )
    msg = await call.message.edit_text(text, reply_markup=back_keyboard('–í—ñ–¥–º—ñ–Ω–∏—Ç–∏', 'data_for_inst', customer_id))
    await state.update_data(last_msg_id=msg.message_id, key='username', key_name='–Æ–∑–µ—Ä–Ω–µ–π–º')
    await InstagramDataSG.Input.set()


async def input_password(call: CallbackQuery, callback_data: dict, state: FSMContext):
    customer_id = int(callback_data['account_id'])
    text = (
        f'üóÇ [–î–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó | {Buttons.accounts.login_data}]\n\n'
        f'–í—ñ–¥–ø—Ä–∞–≤—Ç–µ <b>–Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å</b> —Ç–µ–∫—Å—Ç–æ–≤–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º üëá'
    )
    msg = await call.message.edit_text(text, reply_markup=back_keyboard('–í—ñ–¥–º—ñ–Ω–∏—Ç–∏', 'data_for_inst', customer_id))
    await state.update_data(last_msg_id=msg.message_id, key='password', key_name='–ü–∞—Ä–æ–ª—å')
    await InstagramDataSG.Input.set()


async def input_auth_key(call: CallbackQuery, callback_data: dict, state: FSMContext):
    customer_id = int(callback_data['account_id'])
    text = (
        f'üóÇ [–î–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó | {Buttons.accounts.login_data}]\n\n'
        f'–í—ñ–¥–ø—Ä–∞–≤—Ç–µ <b>–Ω–æ–≤–∏–π –∫–ª—é—á –¥–≤–æ–µ—Ç–∞–ø–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏</b> —Ç–µ–∫—Å—Ç–æ–≤–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º üëá'
    )
    msg = await call.message.edit_text(text, reply_markup=back_keyboard('–í—ñ–¥–º—ñ–Ω–∏—Ç–∏', 'data_for_inst', customer_id))
    await state.update_data(last_msg_id=msg.message_id, key='auth_key', key_name='–ö–æ–¥ –¥–≤–æ–µ—Ç–∞–ø–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏')
    await InstagramDataSG.Input.set()


async def save_account_data(msg: Message, state: FSMContext, account_db: AccountRepo):
    await msg.delete()
    data = await state.get_data()
    customer_id = data['customer_id']
    last_msg_id = data['last_msg_id']
    key_name = data['key_name']
    key = data['key']
    await account_db.update_account(customer_id, **{key: msg.text})
    await msg.bot.delete_message(msg.from_user.id, last_msg_id)
    text = (
        f'üóÇ [–î–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó | {Buttons.accounts.login_data}]\n\n'
        f'{key_name} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {msg.text} ‚úî'
    )
    await msg.answer(text, reply_markup=back_keyboard(action='data_for_inst', account_id=customer_id))


def setup(dp: Dispatcher):
    dp.register_message_handler(save_work_limit, state=LastNSG.Input)
    dp.register_message_handler(save_account_data, state=InstagramDataSG.Input)

    dp.register_callback_query_handler(data_for_instagram_cmd, account_cb.filter(action='login_data'), state='*')
    dp.register_callback_query_handler(input_username, account_cb.filter(action='edit_username'), state='*')
    dp.register_callback_query_handler(input_password, account_cb.filter(action='edit_password'), state='*')
    dp.register_callback_query_handler(input_auth_key, account_cb.filter(action='edit_auth'), state='*')

    dp.register_callback_query_handler(create_work_cmd, add_work_cb.filter(action='confirm'), state='*')
    dp.register_callback_query_handler(confirm_add_work, add_work_cb.filter(action='mode'), state='*')
    dp.register_callback_query_handler(delete_work_cmd, account_cb.filter(action='del_work'), state='*')
    dp.register_callback_query_handler(confirm_delete_work, mod_work_cb.filter(action='delete'), state='*')
    dp.register_callback_query_handler(delete_work, mod_work_cb.filter(action='conf_delete'), state='*')

    dp.register_callback_query_handler(confirm_pause_cmd, account_cb.filter(action='pause'), state='*')
    dp.register_callback_query_handler(confirm_resume_cmd, account_cb.filter(action='resume'), state='*')
    dp.register_callback_query_handler(resume_cmd, account_cb.filter(action='conf_resume'), state='*')
    dp.register_callback_query_handler(pause_cmd, account_cb.filter(action='conf_pause'), state='*')

    dp.register_callback_query_handler(confirm_delete_cmd, account_cb.filter(action='delete'), state='*')
    dp.register_callback_query_handler(delete_account_cmd, account_cb.filter(action='conf_delete'), state='*')

    dp.register_callback_query_handler(posting_setting_cmd, account_cb.filter(action='settings'), state='*')
    dp.register_callback_query_handler(developer_settings, account_cb.filter(action='dev'), state='*')
    dp.register_callback_query_handler(limit_cmd, account_cb.filter(action='limit'), state='*')
    dp.register_callback_query_handler(limit_cmd, limit_cb.filter(), state='*')
    dp.register_callback_query_handler(select_executor_work, account_cb.filter(action='add_work'), state='*')
    dp.register_callback_query_handler(select_work_mode, add_work_cb.filter(action='select'), state='*')

    dp.register_callback_query_handler(posting_cmd, menu_cb.filter(action='posting'), state='*')
    dp.register_callback_query_handler(posting_cmd, account_cb.filter(type='posting', action='pag'), state='*')
    dp.register_callback_query_handler(posting_cmd, account_cb.filter(type='posting', action='back'), state='*')


def construct_customer_text(account: Account):
    text = (
        f'–ù–æ–º–µ—Ä –∞–∫–∞—É–Ω—Ç—É: {account.account_id}\n'
        f'–°—Ç–∞—Ç—É—Å: <b>{construct_customer_status(account)}</b>\n'
        f'–õ—ñ–º—ñ—Ç –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π: {account.limit} –ø–æ—Å—Ç—ñ–≤ –≤ –¥–µ–Ω—å\n'
    )
    return text


def construct_customer_status(account: Account) -> str:
    if account.status == AccountStatusEnum.BANNED:
        return 'üü† –ü—Ä–æ–±–ª–µ–º–∏ –∑—ñ –≤—Ö–æ–¥–æ–º'
    elif account.status == AccountStatusEnum.ACTIVE:
        return 'üü¢ –ê–∫—Ç–∏–≤–Ω–∏–π'
    elif account.status == AccountStatusEnum.PAUSE:
        return 'üîµ –ü—É–±–ª—ñ–∫–∞—Ü—ñ—ó –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω—ñ'
    elif account.status == AccountStatusEnum.UNPAID:
        return 'üîí –ü—ñ–¥–ø–∏—Å–∫–∞ —Å–∫—ñ–Ω—á–∏–ª–∞—Å—å'


async def construct_customer_works(account: Account, works: list[Work], account_db: AccountRepo) -> str:
    text = f'üîó –ó–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É:'
    if not works:
        return text + ' –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
    else:
        text += '\n'
    for work, num in zip(works, range(1, len(works) + 1)):
        executor = await account_db.get_account(work.executor_id)
        text += f'  {num}. {executor.username} ({construct_work_mode(work)} {construct_work_status(work)})\n'
    return text


def get_work_mode(mode: str, limit: int):
    if mode == 'all':
        return Buttons.accounts.work.all
    elif mode == 'all_and_new':
        return Buttons.accounts.work.all_and_new + ' –ø–æ—Å—Ç–∏'
    elif mode == 'only_new':
        return Buttons.accounts.work.only_new + ' –ø–æ—Å—Ç–∏'
    elif mode == 'last_n':
        return Buttons.accounts.work.last_n.replace('X', str(limit))


def get_work_enum(mode: str, disable_last_n: bool = False):
    if mode == 'all_and_new':
        return WorkModeEnum.ALL_AND_NEW
    elif mode == 'only_new':
        return WorkModeEnum.ONLY_NEW
    elif mode == 'all':
        return WorkModeEnum.ALL
    else:
        if not disable_last_n:
            return WorkModeEnum.LAST_N
